// Copyright (c) 2025 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
var t,o;t=this,o=function(){"use strict";var t=16,o=8,n="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),r=Object.prototype.toString,e=Object.prototype.hasOwnProperty,f="function"==typeof Symbol?Symbol:void 0,a="function"==typeof f?f.toStringTag:"",l=n&&"symbol"==typeof Symbol.toStringTag?function(t){var o,n,f,l,u;if(null==t)return r.call(t);n=t[a],u=a,o=null!=(l=t)&&e.call(l,u);try{t[a]=void 0}catch(o){return r.call(t)}return f=r.call(t),o?t[a]=n:delete t[a],f}:function(t){return r.call(t)},u="function"==typeof Float64Array,i="function"==typeof Float64Array?Float64Array:null,y="function"==typeof Float64Array?Float64Array:void 0,c=function(){var t,o,n;if("function"!=typeof i)return!1;try{o=new i([1,3.14,-3.14,NaN]),n=o,t=(u&&n instanceof Float64Array||"[object Float64Array]"===l(n))&&1===o[0]&&3.14===o[1]&&-3.14===o[2]&&o[3]!=o[3]}catch(o){t=!1}return t}()?y:function(){throw new Error("not implemented")},p="function"==typeof Float32Array,m=Number.POSITIVE_INFINITY,E="function"==typeof Float32Array?Float32Array:null,b="function"==typeof Float32Array?Float32Array:void 0,s=function(){var t,o,n;if("function"!=typeof E)return!1;try{o=new E([1,3.14,-3.14,5e40]),n=o,t=(p&&n instanceof Float32Array||"[object Float32Array]"===l(n))&&1===o[0]&&3.140000104904175===o[1]&&-3.140000104904175===o[2]&&o[3]===m}catch(o){t=!1}return t}()?b:function(){throw new Error("not implemented")};return function(n,r){if("object"==typeof(e=n)&&null!==e&&"Complex128Array"===e.constructor.name&&e.BYTES_PER_ELEMENT===t)return function(t,o){return new c(t.buffer,t.byteOffset+t.BYTES_PER_ELEMENT*o,2*(t.length-o))}(n,r);var e;if(function(t){return"object"==typeof t&&null!==t&&"Complex64Array"===t.constructor.name&&t.BYTES_PER_ELEMENT===o}(n))return function(t,o){return new s(t.buffer,t.byteOffset+t.BYTES_PER_ELEMENT*o,2*(t.length-o))}(n,r);throw new TypeError(function(){var t,o=arguments,n="https://stdlib.io/e/"+o[0]+"?";for(t=1;t<o.length;t++)n+="&arg[]="+encodeURIComponent(o[t]);return n}("invalid argument. First argument must be a complex-valued floating-point array. Value: `%s`.",n))}},"object"==typeof exports&&"undefined"!=typeof module?module.exports=o():"function"==typeof define&&define.amd?define(o):(t="undefined"!=typeof globalThis?globalThis:t||self).reinterpret=o();
//# sourceMappingURL=browser.js.map
